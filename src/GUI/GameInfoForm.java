/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Data.Props;
import Logic.Game;
import Logic.Order;
import Logic.Player;
import Logic.Region;
import Logic.Unit;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author timjl
 */
public class GameInfoForm extends javax.swing.JFrame {

    public enum INFO_SOURCE {ORDERS, LOG, ABOUT, STATE};
    private INFO_SOURCE dataSource = INFO_SOURCE.ABOUT;
    Game currentGame;
    
    /**
     * Creates new form GameInfoForm
     */
    public GameInfoForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoAreaTextBox = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        infoAreaTextBox.setEditable(false);
        infoAreaTextBox.setColumns(20);
        infoAreaTextBox.setLineWrap(true);
        infoAreaTextBox.setRows(5);
        infoAreaTextBox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(infoAreaTextBox);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        showData (dataSource, currentGame);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameInfoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameInfoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameInfoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameInfoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameInfoForm().setVisible(true);
            }
        });
    }

    /**
     * Used by caller to determine which information should be displayed based
     * on the Game object passed in
     * 
     * @param source what info to show
     * @param currentGame 
     */
    public void showData (INFO_SOURCE source, Game currentGame) {
        String vals = "";
        
        this.currentGame = currentGame;
        
        switch (source){
            case ORDERS:
                vals = readCurrentOrders();
                this.setTitle("Current Orders");
                break;
                
            case LOG:
                vals = readLog ();
                this.setTitle("Game Log");
                break;
                
            case ABOUT :
                vals = getAbout ();
                this.setTitle("About");
                break;
                
            case STATE:
                vals = readCurrentState();
                this.setTitle("State");
                break;
        }
        
        infoAreaTextBox.setText(vals);
        dataSource = source;
        
        if (source != INFO_SOURCE.LOG){
            infoAreaTextBox.setCaretPosition(0);
        }
    }
    
    /**
     * Show the summary of the program such as creator and version number
     * @return 
     */
    private String getAbout () {
        String aboutData = "Diplomacy\nA personal project (not for resale) to allows players of Diplomacy to enter orders and have them resolved quickly and easily.\n\nWritten by Tim Little\n\nVersion:  ";
        
        try {
            Props props = new Props();
            aboutData += props.getVersionString();
            
        } catch (IOException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
            aboutData +=" Error reading version";
        }
        
        return aboutData;
    }
    
    /**
     * The game log contains the information about the order resolution etc.
     * 
     * @return 
     */
    private String readLog () {
        String logData = "";
        String loc = "props file";
        
        try {
            String line = "";
            Props props = new Props();
            
            loc = props.getLogFileLoc();
            
            File logFile = new File(loc);
            
            Scanner myReader = new Scanner(logFile);
            
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                logData += data + "\n";
            }
            
            myReader.close();
            
        }catch (IOException ex) {
            Logger.getLogger(GameInfoForm.class.getName()).log(Level.SEVERE, null, ex);
            logData = "Error reading file " + loc + "\nerr " + ex.getMessage();
        }
        
        return logData;
    }
    
    /**
     * Creates a string summarising the position of each player.
     * 
     * @return 
     */
    private String readCurrentState() {
        String curState = "";
        
        for (Map.Entry playerMap : currentGame.getAllPlayers().entrySet()){
            Player curPlayer = (Player)playerMap.getValue();
            
            if (curPlayer.getPlayerId() > 0){

                //Display the name underlined
                curState += curPlayer.getPlayerName() + "\n";
                for (int v = 0; v < curPlayer.getPlayerName().length(); v++){
                    curState += "=";
                }

                //List the player's current units with location
                curState += "\nUnits:\n";
                Iterator units = curPlayer.getUnits().iterator();
                while (units.hasNext()){
                    Unit curUnit = (Unit)units.next();
                    curState += "   " + curUnit.toString() + "\n";
                }

                //List the player's currently owned supply centers
                curState += "\nOwned supply centers:\n";
                Iterator supplyCenters = curPlayer.getSupplyCenters().iterator();
                while (supplyCenters.hasNext()){
                    Region curRegion = (Region)supplyCenters.next();
                    curState += "   " + curRegion.toString() + "\n";
                }
                
                curState += "\n\n";
            }
        }
        return curState;
    }
    
    /**
     * Shows what the orders for the current turn are.
     * @return 
     */
    private String readCurrentOrders () {
        String orderDetails = "";
        
        for (Map.Entry playerMap : currentGame.getAllPlayers().entrySet()){
            Player curPlayer = (Player)playerMap.getValue();
            
            if (curPlayer.getPlayerId() > 0){
                orderDetails += curPlayer.getPlayerName() + "(" + curPlayer.getUnits().size() + ") :\n";

                for (int x =0; x< curPlayer.getUnits().size(); x++){
                    Unit curUnit = curPlayer.getUnits().get(x);

                    orderDetails += curUnit.getCurrentOrder().toString() + "\n";
                }

                orderDetails += "\n";
            }
        }
        
        return orderDetails;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infoAreaTextBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
