/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Data.Props;
import Logic.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


/**
 *
 * @author timjl
 */
public class OrderForm extends javax.swing.JFrame {
    private Unit currentUnit;
    private Game game;
    private Props.Phase phase;
    private Order currentOrder;
    private boolean dirty = false;
    
    /**
     * Creates new form OrderForm
     */
    public OrderForm() {
        initComponents();
    }

    public void setDetails(Unit currentUnit, Game g) {
        this.currentUnit = currentUnit;
        currentOrder = currentUnit.getCurrentOrder();
        
        game = g;
        this.phase = g.getGamePhase();
        
        titleLabel.setText(currentUnit.toString());
        
        String orderList [] = Order.getCommandTypes(phase);
        
        DefaultComboBoxModel orderModel = (DefaultComboBoxModel)orderOptionsCombo.getModel();
        orderModel.removeAllElements();
        
     
        for (int x = 0; x < orderList.length; x++) {
            
            if (currentUnit.getUnitType() != Unit.UnitType.ARMY || orderList[x].compareToIgnoreCase(Order.getCommandTypeAsString(Order.OrderType.CONVOY)) != 0){
                orderModel.addElement(orderList[x]);
                if (orderList[x].compareToIgnoreCase(currentOrder.getCommandTypeAsString()) == 0) {
                    orderOptionsCombo.setSelectedIndex(x);
                }
            }
        }
        setFields (currentOrder.getCommand());
        
        saveButton.setEnabled(false);
        dirty = false;
    }

    private void setDirty () {
        dirty = true;
        saveButton.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        orderOptionsCombo = new javax.swing.JComboBox<>();
        convoyedCheckBox = new javax.swing.JCheckBox();
        fromCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        toCombo = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel1.setText("Order:");

        orderOptionsCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        orderOptionsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderOptionsComboActionPerformed(evt);
            }
        });

        convoyedCheckBox.setText("Being Convoyed?");
        convoyedCheckBox.setEnabled(false);
        convoyedCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        convoyedCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        convoyedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convoyedCheckBoxActionPerformed(evt);
            }
        });

        fromCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fromCombo.setEnabled(false);
        fromCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromComboActionPerformed(evt);
            }
        });

        jLabel2.setText("From:");

        jLabel3.setText("To:");

        toCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        toCombo.setEnabled(false);
        toCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toComboActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(orderOptionsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saveButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(closeButton))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(convoyedCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderOptionsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(convoyedCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(closeButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String errMsg = "";
        
        Order.OrderType orderType = Order.mapCommandTypeFromString(orderOptionsCombo.getSelectedItem().toString());
        
        currentOrder.setCommand(orderType);
        
        if (orderType == Order.OrderType.MOVE){
            currentOrder.setBeingConvoyed(convoyedCheckBox.isSelected());
        } else {
            currentOrder.setBeingConvoyed(false);
        }
        
        if (orderType == Order.OrderType.MOVE || 
            orderType == Order.OrderType.SUPPORT || 
            orderType == Order.OrderType.CONVOY || 
            orderType == Order.OrderType.RETREAT ){
            
            Border border = (Border)toCombo.getSelectedItem();
            
            if (border != null) {
                currentOrder.setDest(border);
            } else {
                errMsg += "To is a mandatory field\n";
            }
        } else {
            currentOrder.setDest(null);
        }

        if (orderType == Order.OrderType.SUPPORT || 
            orderType == Order.OrderType.CONVOY ){
            
            Border border = (Border)fromCombo.getSelectedItem();
            
            if (border != null) {
                currentOrder.setOrigin(border);
            } else {
                errMsg += "From is a mandatory field\n";
            }
        } else {
            currentOrder.setOrigin(currentUnit.getPosition());
        }
        
        if (errMsg.isEmpty()) {
            currentOrder.save();
            dirty = false;
            saveButton.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, errMsg, "Save failed", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void orderOptionsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderOptionsComboActionPerformed
        Order.OrderType newType = currentOrder.getCommand();
        
        if (orderOptionsCombo.getSelectedIndex() >= 0) {
            String strCommand = orderOptionsCombo.getSelectedItem().toString();
            newType = Order.mapCommandTypeFromString(strCommand);
        }
        
        setFields (newType);
        setDirty ();

    }//GEN-LAST:event_orderOptionsComboActionPerformed

    private void convoyedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convoyedCheckBoxActionPerformed
        DefaultComboBoxModel toModel = (DefaultComboBoxModel) toCombo.getModel();
        toModel.removeAllElements();
        if (convoyedCheckBox.isSelected()) {
           
            for (Border b : game.getCoastsList()) {
                toModel.addElement(b);

                if (b.getBorderId() == currentOrder.getDestinationId() ){
                    toCombo.setSelectedIndex(toModel.getSize() - 1);
                }
            }            
        } else {
            LinkedList<Border> neighbours = currentUnit.getPosition().getNeighbours();
            Collections.sort(neighbours);
            for (Border b : neighbours){
                toModel.addElement(b);
                if (b.getBorderId() == currentOrder.getDestinationId() ){
                    toCombo.setSelectedIndex(toModel.getSize() - 1);
                }
            }
        }
        
        setDirty ();
    }//GEN-LAST:event_convoyedCheckBoxActionPerformed

    private void fromComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboActionPerformed
        setDirty ();
    }//GEN-LAST:event_fromComboActionPerformed

    private void toComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toComboActionPerformed
        setDirty ();
    }//GEN-LAST:event_toComboActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        boolean close = true;
        if (dirty) {
           if (JOptionPane.showConfirmDialog (this, "Discard changes?", "Data Changed", JOptionPane.YES_NO_OPTION ) == JOptionPane.NO_OPTION ) {
               close = false;
           }
        }
        
        if (close) {
            this.dispose();
        }
    }//GEN-LAST:event_closeButtonActionPerformed

    private int populateBorderModel (DefaultComboBoxModel model, LinkedList<Border> list, Unit.UnitType unitType, int currentBorderId) {
        int ret = -1;
        model.removeAllElements();
        
        for (Border b : list) {
            switch (b.getType()) {
                case COAST:
                    model.addElement(b);
                    if (b.getBorderId() == currentBorderId){
                        ret = model.getSize() - 1;
                        model.setSelectedItem(b);
                    }
                    break;
                
                case LAND: 
                    if (unitType == Unit.UnitType.ARMY) {
                        model.addElement(b);
                        if (b.getBorderId() == currentBorderId){
                            ret = model.getSize() - 1;
                            model.setSelectedItem(b);
                        }
                    }
                    break;
                    
                case SEA:
                    if (unitType == Unit.UnitType.FLEET) {
                        model.addElement(b);
                        if (b.getBorderId() == currentBorderId){
                            ret = model.getSize() - 1;
                            model.setSelectedItem(b);
                        }
                    }
                    break; 
            }
        }
        
        return ret;
    }
    
    private void setFields (Order.OrderType newType) {
        LinkedList<Border> neighbours = currentUnit.getPosition().getNeighbours();
        int selected;
        DefaultComboBoxModel toModel = (DefaultComboBoxModel) toCombo.getModel();
        DefaultComboBoxModel fromModel = (DefaultComboBoxModel) fromCombo.getModel();
        
        Map<Integer, Border> allBorders = game.getAllBorders();
        ArrayList<Entry<Integer, Border>> allList = new ArrayList<>(allBorders.entrySet());
        
        allList.sort(Entry.comparingByValue());
        Collections.sort(neighbours);
        
        
        switch (newType) {
            case HOLD:
                convoyedCheckBox.setEnabled(false);
                fromCombo.setEnabled(false);
                toCombo.setEnabled(false);
                
                fromCombo.removeAllItems();
                toCombo.removeAllItems();
                fromModel.addElement(currentUnit.getPosition());
                fromCombo.setSelectedIndex(0);
                break;
                
            case MOVE:
                if (currentUnit.getUnitType() == Unit.UnitType.ARMY)
                    convoyedCheckBox.setEnabled(true);
                else
                    convoyedCheckBox.setEnabled(false);
                    
                if (currentOrder.isBeingConvoyed()) {
                    convoyedCheckBox.setSelected(true);
                }
                fromCombo.setEnabled(false);
                fromCombo.removeAllItems();
                toCombo.setEnabled(true);
                
                selected = populateBorderModel (toModel, neighbours, currentUnit.getUnitType(), currentOrder.getDestinationId());
                toCombo.setSelectedIndex(selected);
                
                fromModel.addElement(currentUnit.getPosition());
                fromCombo.setSelectedIndex(0);
                             
                break;               
                
            case SUPPORT:
                convoyedCheckBox.setEnabled(false);
                fromCombo.setEnabled(true);
                toCombo.setEnabled(true);                                

                populateBorderModel (toModel, neighbours, currentUnit.getUnitType(), currentOrder.getDestinationId());

                fromModel.removeAllElements();
                for (Entry m : allList) {
                    Border b = (Border)m.getValue();
                   fromModel.addElement(b);
                   
                   if (b.getBorderId() == currentOrder.getOriginId()) {
                       fromCombo.setSelectedIndex(fromModel.getSize() - 1);
                   }
                }
                
                break;
                
            case CONVOY:
                convoyedCheckBox.setEnabled(false);
                fromCombo.setEnabled(true);
                toCombo.setEnabled(true);

                populateBorderModel (toModel, game.getCoastsList(), currentUnit.getUnitType(), currentOrder.getOriginId());
                populateBorderModel (fromModel, game.getCoastsList(), currentUnit.getUnitType(), currentOrder.getDestinationId());
                
                
                
                break;
                
            default:
                convoyedCheckBox.setEnabled(false);
                fromCombo.setEnabled(false);
                toCombo.setEnabled(false);                
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox convoyedCheckBox;
    private javax.swing.JComboBox<String> fromCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> orderOptionsCombo;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox<String> toCombo;
    // End of variables declaration//GEN-END:variables
}
