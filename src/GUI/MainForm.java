/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Data.*;
import Logic.*;
import java.awt.Dialog;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author timjl
 */
public class MainForm extends javax.swing.JFrame {
    private Game game;
    private static final String UNIT_NODE_TITLE = "Units";
    DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Countries");
    DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        actButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        unitsTree = new javax.swing.JTree();
        mapPanel1 = new GUI.MapPanel();
        infoLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        newGameMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Diplomacy");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        titleLabel.setText("Spring 1901 Create order phase");

        actButton.setText("Act");
        actButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actButtonActionPerformed(evt);
            }
        });

        unitsTree.setModel(treeModel);
        unitsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unitsTreeMouseClicked(evt);
            }
        });
        unitsTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                unitsTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(unitsTree);

        javax.swing.GroupLayout mapPanel1Layout = new javax.swing.GroupLayout(mapPanel1);
        mapPanel1.setLayout(mapPanel1Layout);
        mapPanel1Layout.setHorizontalGroup(
            mapPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 749, Short.MAX_VALUE)
        );
        mapPanel1Layout.setVerticalGroup(
            mapPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        infoLabel.setText("Double click on a unit to enter an order.");
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        infoLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jMenu1.setText("File");

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(settingsMenuItem);

        newGameMenuItem.setText("New Game");
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newGameMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addComponent(actButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actButton))
                    .addComponent(mapPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actButtonActionPerformed
        boolean okToMoveOn = false;
        
        try {
            switch (game.getGamePhase()) {
                case ORDER:
                    case RETREAT:
                    game.resolveAllOrders();
                    break;
//                    
//                case RETREAT:
//                    //Resolve retreats
//                    LinkedList <Unit> retreatList = game.getRetreatList();
//                    if (!retreatList.isEmpty()) {
//                        for (Unit u : retreatList) {
//                            Order o = u.getCurrentOrder();
//                            u.setPosition(o.getDest());
//                            u.save();
//                            
//                            o.setCommand(Order.OrderType.HOLD);
//                            o.setState(Order.ORDER_STATE.SUCCEEDED);
//                        }
//                    }
//                    
//                    break;
                    
                case BUILD:
                    
                    break;
                    
            }
            
            //Move to the next phase and do any initiallising required
            game.nextPhase();
            
            if (game.getGamePhase() == Props.Phase.ORDER) {
                game.setStartOfOrderPhase ();
            }

            if (game.getGamePhase() == Props.Phase.BUILD) {
                game.changeSupplyPointOwnership();
            }
            
            this.setTitle(game.getTitle());
            drawTree ();
            treeModel.reload();
            titleLabel.setText(game.getTitle());
            mapPanel1.repaint();
            
            
        } catch (DataAccessException | IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_actButtonActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        PropsEditorForm propsEditor = new PropsEditorForm (this, true);
        
        propsEditor.setModal(true);
        propsEditor.setVisible(true);

    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void drawTree () {
        
        rootNode.removeAllChildren();
        int buildCount = 0;
        int scCount;
        
        for (Map.Entry m : game.getAllPlayers().entrySet()){
            Player p = (Player)m.getValue();
            DefaultMutableTreeNode playerNode;
            
            if (p.getPlayerId()>0){
                ArrayList<Unit> units;
                
                switch (game.getGamePhase()) {
                    case RETREAT:
                        units = p.getRetreatUnits();
                        playerNode = new DefaultMutableTreeNode(p.toString() + " (" + units.size() + ")");
                        break;
                    
                    case BUILD:
                        buildCount = p.getBuildCount();
                        //playerNode = new DefaultMutableTreeNode(p.toString() + " (" + buildCount + ")");
                        playerNode = new DefaultMutableTreeNode(p);
                        //If the user needs to disband a piece show the list
                        if (buildCount < 0) {
                            units = p.getUnits();
                        } else {
                            units = new ArrayList<>();
                        }
                        break;
                        
                    default:
                        playerNode = new DefaultMutableTreeNode(p);
                        units = p.getUnits();
                        break;
                }
                
                rootNode.add(playerNode);
                
                if (!units.isEmpty()){
                    DefaultMutableTreeNode unitsNode = new DefaultMutableTreeNode(UNIT_NODE_TITLE);

                    for (Unit u : units){
                        DefaultMutableTreeNode unitNode = new DefaultMutableTreeNode(u);
                        unitsNode.add(unitNode);
                    }

                    playerNode.add(unitsNode);
                }

                DefaultMutableTreeNode centersNode = new DefaultMutableTreeNode("Supply Centers");

                scCount = 0;
                for (Region r : p.getSupplyCenters()){
                    //Add the supply center if it isn't a build phase, otherwise only add it if 
                    //it is unocuppied, owned by the player and the buildcount is positive
                    if (game.getGamePhase() != Props.Phase.BUILD || 
                                (buildCount >0 && !r.isOccupied() && r.getOwnerId() == p.getPlayerId() && p.isHomeRegion(r.getRegionCode()))){
                        centersNode.add(new DefaultMutableTreeNode(r));
                        scCount++;
                    }
                        
                }
                if (scCount > 0){
                    playerNode.add(centersNode);
                }
            }

        }
        treeModel.reload();
        
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        try {
            titleLabel.setText("Loading game ...");
            game = new Game();
            drawTree ();
            mapPanel1.setGame(game);
             
            titleLabel.setText(game.getTitle());
            
           
        
        } catch (DataAccessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void unitsTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unitsTreeMouseClicked
        
        if (evt.getClickCount() == 2) {
        
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) unitsTree.getLastSelectedPathComponent();
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode)selectedNode.getParent();
            
            if (game.getGamePhase() != Props.Phase.BUILD){

                if (parentNode.getUserObject().toString().compareTo(UNIT_NODE_TITLE) == 0) {
                    Unit u = (Unit)selectedNode.getUserObject();

                    Order o = u.getCurrentOrder();

                    //JOptionPane.showMessageDialog(this, o.toString(), "Order", JOptionPane.INFORMATION_MESSAGE);

                    OrderForm orderForm = new OrderForm();
                    orderForm.setDetails(u, game );
                    orderForm.setModalExclusionType(Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
                    orderForm.setVisible(true);
                }
            } else {
                if (selectedNode.getUserObject().getClass() == Player.class) {
                    Player curPlayer = (Player)selectedNode.getUserObject();
                    BuildForm builds = new BuildForm ();
                    builds.initialiseForm(game, curPlayer);
                    builds.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_unitsTreeMouseClicked

    private void unitsTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_unitsTreeValueChanged

    }//GEN-LAST:event_unitsTreeValueChanged

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure?", "Restart Game", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            try {
                game.restartGame ();
            } catch (DataAccessException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            drawTree();
            mapPanel1.repaint();
            this.setTitle(game.getTitle());
            titleLabel.setText(game.getTitle());
        }
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private GUI.MapPanel mapPanel1;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTree unitsTree;
    // End of variables declaration//GEN-END:variables
}
